/*********************************************************************************
 *
 * Inviwo - Interactive Visualization Workshop
 *
 * Copyright (c) 2015-2018 Inviwo Foundation
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *********************************************************************************/

#include <modules/vectorfieldvisualizationgl/vectorfieldvisualizationglmodule.h>
#include <modules/opengl/shader/shadermanager.h>

#include <modules/vectorfieldvisualizationgl/processors/datageneration/lorenzsystem.h>
#include <modules/vectorfieldvisualizationgl/processors/datageneration/vectorfieldgenerator2d.h>
#include <modules/vectorfieldvisualizationgl/processors/datageneration/vectorfieldgenerator3d.h>
#include <modules/vectorfieldvisualizationgl/processors/datageneration/vectorfieldgenerator4d.h>
#include <modules/vectorfieldvisualizationgl/processors/2d/lic2d.h>
#include <modules/vectorfieldvisualizationgl/processors/2d/hedgehog2d.h>
#include <modules/vectorfieldvisualizationgl/processors/2d/vector2dmagnitude.h>
#include <modules/vectorfieldvisualizationgl/processors/2d/vector2dcurl.h>
#include <modules/vectorfieldvisualizationgl/processors/2d/vector2ddivergence.h>

#include <modules/vectorfieldvisualizationgl/processors/3d/lic3d.h>
#include <modules/vectorfieldvisualizationgl/processors/3d/vector3dcurl.h>
#include <modules/vectorfieldvisualizationgl/processors/3d/vector3ddivergence.h>
#include <modules/vectorfieldvisualizationgl/processors/4d/tmip.h>

// Autogenerated
#include <modules/vectorfieldvisualizationgl/shader_resources.h>

#include <inviwo/core/io/serialization/versionconverter.h>

namespace inviwo {

VectorFieldVisualizationGLModule::VectorFieldVisualizationGLModule(InviwoApplication* app)
    : InviwoModule(app, "VectorFieldVisualizationGL") {
    // Add a directory to the search path of the Shadermanager

    vectorfieldvisualizationgl::addShaderResources(ShaderManager::getPtr(),
                                                   {getPath(ModulePath::GLSL)});

    registerProcessor<LorenzSystem>();
    registerProcessor<VectorFieldGenerator2D>();
    registerProcessor<VectorFieldGenerator3D>();
    registerProcessor<LIC2D>();
    registerProcessor<HedgeHog2D>();

    registerProcessor<Vector2DMagnitude>();
    registerProcessor<Vector2DCurl>();
    registerProcessor<Vector2DDivergence>();

    registerProcessor<LIC3D>();
    registerProcessor<Vector3DCurl>();
    registerProcessor<Vector3DDivergence>();
    registerProcessor<TMIP>();
    registerProcessor<VectorFieldGenerator4D>();
}

int VectorFieldVisualizationGLModule::getVersion() const { return 3; }

std::unique_ptr<VersionConverter> VectorFieldVisualizationGLModule::getConverter(
    int version) const {
    return util::make_unique<Converter>(version);
}

VectorFieldVisualizationGLModule::Converter::Converter(int version) : version_(version) {}

bool VectorFieldVisualizationGLModule::Converter::convert(TxElement* root) {
    std::vector<xml::IdentifierReplacement> repl = {};

    const std::vector<std::pair<std::string, std::string>> volumeGLrepl = {
        {"Vector3DCurl", "vector3dcurl.frag"}, {"Vector3DDivergence", "vector3ddivergence.frag"}};
    for (const auto& i : volumeGLrepl) {
        xml::IdentifierReplacement inport = {{xml::Kind::processor("org.inviwo." + i.first),
                                              xml::Kind::inport("org.inviwo.VolumeInport")},
                                             i.second + "inport",
                                             "inputVolume"};
        xml::IdentifierReplacement outport = {{xml::Kind::processor("org.inviwo." + i.first),
                                               xml::Kind::outport("org.inviwo.VolumeOutport")},
                                              i.second + "outport",
                                              "outputVolume"};
        repl.push_back(inport);
        repl.push_back(outport);
    }

    bool res = false;
    switch (version_) {
        case 0: {
            res |= xml::changeIdentifiers(root, repl);
        }
        case 1: {
            for (const auto& fromTO : std::vector<std::pair<std::string, std::string>>{
                     {"StreamLines", "StreamLinesDepricated"},
                     {"PathLines", "PathLinesDepricated"},
                     {"StreamLines2", "StreamLines3D"},
                     {"PathLines2", "PathLines3D"},
                     {"SeedPointGenerator", "SeedPointGenerator3D"}}) {
                res |= xml::changeAttribute(
                    root, {{xml::Kind::processor("org.inviwo." + fromTO.first)}}, "type",
                    "org.inviwo." + fromTO.first, "org.inviwo." + fromTO.second);
            }
        }
        case 2: {
            res |= integralLineTracerMetaDataProperty(root);
        }
            return res;

        default:
            return false;  // No changes
    }
    return true;
}

bool VectorFieldVisualizationGLModule::Converter::integralLineTracerMetaDataProperty(
    TxElement* root) {
    std::vector<xml::ElementMatcher> selectors;
    xml::ElementMatcher popertiesMatcher;
    popertiesMatcher.name = "Properties";
    for (std::string id : {/*"PathLines", "StreamLines",*/ "StreamLines2D"}) {
        auto kind = xml::Kind::processor("org.inviwo." + id);
        selectors.insert(selectors.end(), kind.getMatchers().begin(), kind.getMatchers().end());
        selectors.push_back(popertiesMatcher);
    }
    bool res = false;
    xml::visitMatchingNodes(root, selectors, [&res, this](TxElement* node) {
        for (std::string id : {"calculateCurvature", "calculateTortuosity"}) {
            TxElement prop("Property");
            prop.SetAttribute("type", "org.inviwo.BoolProperty");
            prop.SetAttribute("identifier", id);
            TxElement val("value");
            val.SetAttribute("content", "1");
            prop.InsertEndChild(val);
            node->InsertEndChild(prop);
        }
        res |= true;
    });

    return res;
}

}  // namespace inviwo
