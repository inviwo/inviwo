#include "utils/structs.glsl"
#include "utils/sampler2d.glsl"
#include "utils/sampler3d.glsl"

#include "utils/classification.glsl"
#include "utils/compositing.glsl"
#include "utils/depth.glsl"
#include "utils/gradients.glsl"
#include "utils/shading.glsl"
#include "utils/raycastgeometry.glsl"

#include "random.glsl"
#include "transmittancemethods.glsl"
#include "renderingmethods.glsl"

// volume
uniform sampler3D volume;
uniform VolumeParameters volumeParameters;

// entry
uniform sampler2D entryColor;
uniform sampler2D entryDepth;
uniform ImageParameters entryParameters;

// exit
uniform sampler2D exitColor;
uniform sampler2D exitDepth;
uniform ImageParameters exitParameters;

// output
uniform layout(binding=0, rgba8) image2D outportColor;
writeonly uniform image2D outportDepth;
writeonly uniform image2D outportPicking;
uniform ImageParameters outportParameters;

// Uniform properties
uniform CameraParameters camera;
uniform VolumeIndicatorParameters positionindicator;
uniform RaycastingParameters raycaster;
uniform LightParameters light; //lighting
uniform sampler2D transferFunction; 

uniform int channel;

uniform float time_ms;
uniform int iteration;

#define PI 3.1415

layout (local_size_x = 16, local_size_y = 16) in;

vec3 calcCameraDir(in vec3 entryPoint, in vec3 exitPoint, in mat4 textureToWorld) {
    return normalize(
        (textureToWorld * vec4(entryPoint, 1.0) - textureToWorld * vec4(exitPoint, 1.0)).xyz);
}

vec4 pathtrace(
    ImageParameters outParam, vec3 entryPoint, vec3 exitPoint, float entryDepth, float exitDepth, 
    float rayDepth, inout float depth, RaycastingParameters rayCastParam, 
    VolumeParameters volParam, vec4 bgColor, float extinctionUpper) {

    vec4 result = vec4(0.0);

    vec3 ray = exitPoint - entryPoint;
    vec3 rayDir = normalize(ray);  
    float rayLength = length(ray);  

    uint globalDimX = gl_WorkGroupSize.x*gl_NumWorkGroups.x;
    uint globalDimY = gl_WorkGroupSize.y*gl_NumWorkGroups.y;
    uint gid = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y*globalDimX;

    vec3 cameraDir = calcCameraDir(entryPoint, exitPoint, volParam.textureToWorld);

    vec3 samplePosition = entryPoint;
    uint hashSeed = gid + floatBitsToUint(time_ms);

    float T = 0.0f;
    float meanfreepath = WoodcockTracking(samplePosition, rayDir, rayPosition, rayLength, hashSeed,
            volume, volumeParameters, transferFunction, extinctionUpper);

    if (meanfreepath <= rayLength) {
        samplePosition = entryPoint + meanfreepath * rayDir;
        rayDepth = meanfreepath;
        
        result.rgb = RMVolumeRender_SingleScatter_SingleLight(meanfreepath, volume, volumeParameters, 
            transferFunction, samplePosition, cameraDir, light, hashSeed, channel, extinctionUpper);

        result.a = 1f - T;
        #pragma IVW_SHADER_SEGMENT_PLACEHOLDER_LOOP
    } else {
         result = bgColor;
    }
    depth = mix(calculateDepthValue(camera, rayDepth / rayLength, entryDepth, exitDepth),
                depth, rayDepth == -1.0);
    
    return result;
}

void main(){

                               // The accumulated color along the ray;
    vec4 picking = vec4(0.0);  // The picking color of the ray
                               // The ray depth value [0, ray length], -1 means "no" depth.
    float rayDepth = -1.0;     // Uses the same space as rayPosition. Usually used to track
                               // the depth of the "first" hit in DVR.
    float depth = 1.0;         // The image depth, from far to near [0, 1].
                               // Will be overridden by rayDepth if != -1 and then
                               // written to outportDepth

    ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
    vec2 texCoord = vec2(0.5 + gl_GlobalInvocationID.xy) / outportParameters.dimensions;    

    vec3 entryPoint = texture(entryColor, texCoord).xyz;
    vec3 exitPoint = texture(exitColor, texCoord).xyz;

    float entryPointDepth = texture(entryDepth, texCoord).x;
    float exitPointDepth = texture(exitDepth, texCoord).x;

    // alpha channel barely does anything...
    vec4 bgColor = vec4(0.0f);

    if (entryPoint == exitPoint) {
        imageStore(outportColor, storePos, bgColor); 
        imageStore(outportDepth, storePos, vec4(depth, depth, depth, 255)); 
        imageStore(outportPicking, storePos, picking);
        return;
    }

    float extinctionUpper = 1.0f;
    vec4 color = pathtrace(outportParameters, entryPoint, exitPoint, entryPointDepth, exitPointDepth, 
        rayDepth, depth, raycaster, volumeParameters, bgColor, extinctionUpper);

    vec4 resultPrev = imageLoad(outportColor, storePos);

    float w = 1.0f - 1.0f/float(iteration + 1);
    vec4 resultFinal = mix(result, resultPrev, w);

    imageStore(outportColor, storePos, resultFinal);     
    imageStore(outportDepth, storePos, vec4(depth, depth, depth, 255)); 
    imageStore(outportPicking, storePos, picking);
}
