name: 'Install Inviwo dependencies'
description: 'runs, Chocolatey, Brew and Apt to install dependencies'

inputs:
  linux-compilter:
    description: 'Which linux compilter to use (gcc or clang)'
    default: gcc

  gcc-version:
    description: 'Which gcc version to use'
    default: 14

  clang-version:
    description: 'Which clang version to use'
    default: 19


runs:
  using: "composite"
  steps:
    - name: "Chocolatey Install"
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        # Choco-Install is GH Actions wrappers around choco, which does retries
        # https://github.com/actions/runner-images/blob/main/images/windows/scripts/helpers/ChocoHelpers.ps1
        Install-ChocoPackage -PackageName doxygen.install
        Install-ChocoPackage -PackageName nsis
        Install-ChocoPackage -PackageName tinytex

    - name: "Chocolatey update paths"
      if: runner.os == 'Windows'
      shell: bash
      run: |
        GP=`cygpath -u $GITHUB_PATH`
        echo "/c/Program Files/doxygen/bin" >> $GP
        echo "/c/Program Files (x86)/NSIS" >> $GP
        echo "/c/tools/TinyTeX/bin/win32" >> $GP

    - name: "Brew Install"
      shell: bash
      if: runner.os == 'macOS'
      run: |
        xcrun simctl delete all
        sudo rm -rf ~/Library/Developer/CoreSimulator/Caches/*
        brew install ninja nasm libomp

    - name: "Apt Install"
      shell: bash
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt install --fix-missing libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev \
                         libglew-dev ninja-build nasm libicu-dev libomp-dev

    - name: "Setup GCC ${{ inputs.gcc-version }}"
      shell: bash
      if: runner.os == 'Linux' && inputs.linux-compilter == 'gcc'
      run: |
        sudo apt install --fix-missing  gcc-${{ inputs.gcc-version }} g++-${{ inputs.gcc-version }}
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${{ inputs.gcc-version }} 130 \
                                 --slave /usr/bin/g++ g++ /usr/bin/g++-${{ inputs.gcc-version }} \
                                 --slave /usr/bin/gcov gcov /usr/bin/gcov-${{ inputs.gcc-version }}
        sudo update-alternatives --set gcc /usr/bin/gcc-${{ inputs.gcc-version }}

    - name: "Setup Clang ${{ inputs.clang-version }}"
      shell: bash
      if: runner.os == 'Linux' && inputs.linux-compilter == 'clang'
      run: |
        sudo apt install --fix-missing clang-${{ inputs.clang-version }} \
                                       clang-tidy-${{ inputs.clang-version }} \
                                       clang-format-${{ inputs.clang-version }} \
                                       libc++-${{ inputs.clang-version }}-dev  
        echo "LLVM_PATH=/usr/lib/llvm-${{ inputs.clang-version }}/bin"   >> $GITHUB_ENV
        echo "CC=/usr/lib/llvm-${{ inputs.clang-version }}/bin/clang"    >> $GITHUB_ENV
        echo "CXX=/usr/lib/llvm-${{ inputs.clang-version }}/bin/clang++" >> $GITHUB_ENV

    - name: "Setup Python"
      uses: actions/setup-python@v5.6.0
      with:
        python-version: '=3.12'
        architecture: 'x64'
        cache: 'pip'
        cache-dependency-path: 'inviwo/requirements.txt'

    - name: "Install Python Modules"
      shell: bash
      run: pip3 install -r inviwo/requirements.txt
