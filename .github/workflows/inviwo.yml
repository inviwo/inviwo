name: "Build Inviwo"

on: 
  push:
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

permissions:
  contents: write  # Enable vcpkg to write to the dependency graph

env:
  VCPKG_BINARY_SOURCES: 'clear;x-gha,readwrite'   # recognized by vcpkg
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  VCPKG_FEATURE_FLAGS: dependencygraph
  # QT_DEBUG_PLUGINS: 1                           # print qt plugin debug info

# Information about the github runners can be found here
# https://github.com/actions/runner-images

jobs:
  build:
    name: "Build"
    strategy:
      matrix:
        system: [windows, macos, linux]
        linkage: [dynamic, static]
        configuration: [Release, Debug]
        
        include:
          - system: windows
            os: 'windows-latest'
            cmake: >
              -DIVW_MODULE_EIGENUTILS=ON
              -DIVW_MODULE_HDF5=ON
              -DIVW_MODULE_FFMPEG=ON
              -DIVW_MODULE_WEBBROWSER=ON
              -DIVW_DOXYGEN_PROJECT=ON 
              -DIVW_DOXYGEN_LATEX_PATH="C:/tools/TinyTeX/bin/win32/pdflatex.exe"
            preset: msvc-developer
            targets: 'ALL_BUILD'
            installer: 'inviwo-installer-win'
            artifact: 'build/inviwo-v*.exe'
          
          - system: macos
            os: 'macos-13' # for now macos-latest == macos-12 since macos-13 is still "beta"
            cmake: >
              -DIVW_MODULE_EIGENUTILS=ON
              -DIVW_MODULE_HDF5=ON
              -DIVW_MODULE_FFMPEG=ON
              -DIVW_MODULE_WEBBROWSER=ON
            preset: ninja-developer
            targets: 'all'
            installer: 'inviwo-installer-macos'
            artifact: 'build/inviwo-v*.dmg'
          
          - system: linux
            os: 'ubuntu-22.04'
            # Disable benchmark for now due to error: 
            # memcpy’ is not a member of ‘std’; did you mean ‘wmemcpy’
            cmake: >
              -DIVW_MODULE_EIGENUTILS=ON
              -DIVW_MODULE_HDF5=ON
              -DIVW_MODULE_FFMPEG=ON
              -DIVW_MODULE_WEBBROWSER=ON
              -DIVW_TEST_BENCHMARKS=OFF
            preset: ninja-developer
            targets: 'all'
            installer: 'inviwo-installer-ubuntu'
            artifact: 'build/inviwo-v*.deb'
          
          # linkage
          - linkage: 'dynamic'
            cmake_linkage: 'ON'
          - linkage: 'static'
            cmake_linkage: 'OFF'
          
          # set triplets
          - system: 'windows'
            linkage: 'dynamic'
            triplet: 'x64-windows'
          - system: 'windows'
            linkage: 'static'
            triplet: 'x64-windows-static-md'
            
          - system: 'macos'
            linkage: 'dynamic'
            triplet: 'x64-osx-dynamic'
          - system: 'macos'
            linkage: 'static'
            triplet: 'x64-osx'
            
          - system: 'linux'
            linkage: 'dynamic'
            triplet: 'x64-linux-dynamic'
          - system: 'linux'
            linkage: 'static'
            triplet: 'x64-linux'

          # extra targets 
          - system: windows
            linkage: dynamic
            configuration: Release
            targets: 'ALL_BUILD DOXY-Inviwo DOXY-Python package'
          #- system: macos  # Disable mac packaging since it probably runs out of diskspace
          #  linkage: dynamic
          #  configuration: Release
          #  targets: 'all package'
          - system: linux
            linkage: dynamic
            configuration: Release
            targets: 'all package'

          # need /MD for static to go with x64-windows-static-md
          - system: windows
            linkage: static
            cmake: >
              -DIVW_MODULE_EIGENUTILS=ON
              -DIVW_MODULE_HDF5=ON
              -DIVW_MODULE_FFMPEG=ON
              -DIVW_MODULE_WEBBROWSER=ON
              -DIVW_CFG_MSVC_FORCE_SHARED_CRT=ON

        exclude:
          # Windows debug build are to big, they run out of diskspace
          - system: windows
            configuration: Debug
          # This build fails very close to the end with "ninja: build stopped: interrupted by user."
          - system: linux
            linkage: static
            configuration: Debug

      fail-fast: false
      
    runs-on: ${{ matrix.os }}
    timeout-minutes: 360
    
    steps:
    - name: "Chocolatey Install" 
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        # Choco-Install is GH Actions wrappers around choco, which does retries
        # https://github.com/actions/runner-images/blob/main/images/windows/scripts/helpers/ChocoHelpers.ps1
        Install-ChocoPackage -PackageName doxygen.install 
        Install-ChocoPackage -PackageName nsis
        Install-ChocoPackage -PackageName tinytex

    - name: "Chocolatey update paths"
      if: runner.os == 'Windows'
      shell: bash
      run: |
        GP=`cygpath -u $GITHUB_PATH` 
        echo "/c/Program Files/doxygen/bin" >> $GP
        echo "/c/Program Files (x86)/NSIS" >> $GP
        echo "/c/tools/TinyTeX/bin/win32" >> $GP

    - name: "Brew Install"
      shell: bash
      if: runner.os == 'macOS'
      # xcode 14.3 is currently default.
      run: |
        brew install ninja pkg-config nasm
        sudo xcode-select --switch /Applications/Xcode_15.0.app/Contents/Developer

    - name: "Apt Install, switch to gcc-13"
      shell: bash
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt install --fix-missing libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev \
                         libglew-dev ninja-build gcc-13 g++-13 nasm
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 130 \
                                 --slave /usr/bin/g++ g++ /usr/bin/g++-13 \
                                 --slave /usr/bin/gcov gcov /usr/bin/gcov-12
        sudo update-alternatives --set gcc /usr/bin/gcc-13
    
    - name: "Install Qt"
      uses: jurplel/install-qt-action@v3
      with:
        version: 6.6.0
        dir: ${{ github.workspace }}

    - name: "Setup Python"
      uses: actions/setup-python@v5
      with:
        python-version: '>=3.10'
        architecture: 'x64'
    
    - name: "Install Python Modules" 
      shell: bash
      run: pip3 install numpy Sphinx sphinx-rtd-theme recommonmark

    - name: "Setup MSVC"
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1
      
    - name: "VCPKG Update"
      shell: bash
      run: |
        echo $VCPKG_INSTALLATION_ROOT
        cd $VCPKG_INSTALLATION_ROOT
        git reset --hard
        git pull
    
    - name: "VCPKG Cache config"
      # Cache built dependencies for faster subsequent builds
      # https://learn.microsoft.com/en-us/vcpkg/users/binarycaching#gha
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: "Clone Inviwo"
      uses: actions/checkout@v4
      with: 
        path: inviwo
        submodules: recursive

    - name: "Generate Changelog"
      id: build_changelog
      uses: mikepenz/release-changelog-builder-action@v4
      with:
        toTag: ${{ github.ref }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: "Log Changelog"
      shell: bash
      run: |
        echo "-- Changes --"
        echo "${{ steps.build_changelog.outputs.changelog }}"
        echo "-- End --"

    - name: "Configure CMake"
      shell: bash
      run: >
        VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT && cmake -S inviwo -B build --preset ${{ matrix.preset }}
        --toolchain $VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake
        -DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake
        -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }}
        -DVCPKG_INSTALL_OPTIONS='--clean-after-build'
        -DBUILD_SHARED_LIBS=${{ matrix.cmake_linkage }}
        -DCMAKE_BUILD_TYPE=${{ matrix.configuration }}
        ${{ matrix.cmake }}
        
    - name: "Setup C++ Log matchers"
      uses: Trass3r/setup-cpp@master

    - name: "Build"
      timeout-minutes: 360
      shell: bash
      run: >
        cmake --build build --config ${{ matrix.configuration }} 
        --parallel --target ${{ matrix.targets }}

    - name: "Upload installer"
      if: matrix.linkage == 'dynamic' && matrix.configuration == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.installer }}
        path: ${{ matrix.artifact }}

    - name: "Upload doxygen"
      if: matrix.system == 'windows' &&  matrix.linkage == 'dynamic' && matrix.configuration == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: inviwo-cpp-api
        path: build/docs/inviwo/html/*

    - name: "Upload shpinx"
      if: matrix.system == 'windows' &&  matrix.linkage == 'dynamic' && matrix.configuration == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: inviwo-python-api
        path: build/docs/python-api/*
    
    - name: "Setup tmate session (on failure and debug_enabled)"
      if: ${{ failure() && github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
      uses: mxschmitt/action-tmate@v3
      with:
        timeout-minutes: 15
        limit-access-to-actor: true


  build-linux-apt:
    name: "Build on Linux using Apt"
    runs-on: ubuntu-22.04
    timeout-minutes: 720
    
    steps:
    - name: "Apt Install"
      shell: bash
      # https://packages.ubuntu.com has lists of all available packages
      # 30/11/23 
      # * libnifti-dev: does not work
      #   > CMake Error at /usr/share/cmake/NIFTI/NIFTITargets.cmake:124 (message):
      #   >    The imported target "NIFTI::znz" references the file
      #   >        "/usr/lib/libznz.so.3.0.0"
      #   >    but this file does not exist. 
      #   Should find /usr/lib/x86_64-linux-gnu/libznz.so
      #   libznz path wrong, sets it to /usr/lib instead of /usr/lib/x86_64-linux-gnu/
      # * nlohmann-json: has problems with inja. inja wants to install nlohmann-json somehow
      # * openexr, libopenexr-dev: does not work, submodule and vcpkg uses OpenEXR::OpenEXT 
      #   which does not exist in apts package
      # * fmt: better stick the a newer version
      # * pybind11: does not have the smart holder branch
      # * cimg: there is no standard cmake cimg finder, and not cmake file provided in dist package.
      # * inja: there is no dist package
      # * tinydir: there is no dist package
      run: |
        sudo apt-get update
        sudo apt install --fix-missing \
          build-essential git cmake extra-cmake-modules ninja-build g++-13 gcc-13 \
          freeglut3-dev cimg-dev googletest libassimp-dev libeigen3-dev libfmt-dev \
          libfreetype-dev libglew-dev libglm-dev libgtest-dev libhdf5-dev libjpeg-dev \
          libpng-dev libqt6svg6-dev libtclap-dev libtiff-dev libtirpc-dev \
          libutfcpp-dev libxcursor-dev libxinerama-dev libxrandr-dev libznz-dev \
          nlohmann-json3-dev zlib1g zlib1g-dev python3 python3-numpy python3-pip \
          qt6-base-dev qt6-tools-dev

    - name: "Clone Inviwo"
      uses: actions/checkout@v4
      with: 
        path: inviwo
        submodules: recursive

    - name: "Configure"
      shell: bash
      run: >
        VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT && cmake -S inviwo -B build --preset ninja-user-apt
        -DVCPKG_TARGET_TRIPLET=x64-linux-dynamic
        -DVCPKG_INSTALL_OPTIONS='--clean-after-build'
        -DBUILD_SHARED_LIBS=ON
        -DCMAKE_BUILD_TYPE=Release
        -DIVW_MODULE_EIGENUTILS=ON
        -DIVW_MODULE_HDF5=ON
        -DIVW_MODULE_FFMPEG=OFF
        -DIVW_MODULE_WEBBROWSER=ON
        -DIVW_TEST_BENCHMARKS=OFF
        
    - name: "Setup C++ Log matchers"
      uses: Trass3r/setup-cpp@master

    - name: "Build"
      timeout-minutes: 720
      shell: bash
      run: >
        cmake --build build --config Release --parallel --target all

    # Libcef.so is in the bin not lib dir.
    #- name: "Run"
    #  shell: bash
    #  run: |
    #    cd build/bin
    #    ./inviwo --logconsole --quit

    - name: "Setup tmate session (on failure and debug_enabled)"
      if: ${{ failure() && github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
      uses: mxschmitt/action-tmate@v3
      with:
        timeout-minutes: 15
        limit-access-to-actor: true


  test-installer:
    name: "Test Installer"
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest] # macos-latest,
        include:
          - os: 'windows-latest'
            installer: 'inviwo-installer-win'
          #- os: 'macos-latest'
          #  installer: 'inviwo-installer-macos'
        
    runs-on: ${{ matrix.os }}
    steps:
    - name: "Download artifact"
      uses: actions/download-artifact@v3
      with:
        name: ${{ matrix.installer }}

    # Windows
    - name: "Run Windows Installer"
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        # find the name of the installer
        $exe = Get-ChildItem -Name inviwo-*.exe
        # launch the nsis installer in "silent mode" (/S), should run without user interaction
        Invoke-expression "./$exe /S"
        # this will spawn the installer in the background so we need to wait for it to finish
        $proc = Get-Process | where {$_.ProcessName -like "inviwo-*"} | Select-Object -First 1
        if ($proc) { 
          Wait-Process -Id $proc.id
        }
        
    - name: "Run Inviwo"
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $ver = (Get-ChildItem -Name C:/"Program Files"/Inviwo/*)
        Invoke-expression "C:/'Program Files'/Inviwo/$ver/bin/inviwo-cli.exe --logconsole --quit"
        if($LASTEXITCODE -ne 0) {
          Invoke-expression "C:\'Program Files (x86)'\'Windows Kits'\10\Debuggers\x64\gflags.exe /i C:/'Program Files'/Inviwo/$ver/bin/inviwo-cli.exe +sls"
          Invoke-Expression "C:\'Program Files (x86)'\'Windows Kits'\10\Debuggers\x64\cdb.exe -g -c q C:/'Program Files'/Inviwo/$ver/bin/inviwo-cli.exe"
        }
    
    # Macos
    - name: "Run MacOS Installer"
      if: runner.os == 'macOS'
      shell: bash
      run: |
        # Find the name of the installer 
        DMG=$(ls Inviwo-*.dmg)
        # Mount installer image
        hdiutil attach $DMG
        # Install by copying Inviwo.app to applications folder
        cp -r /Volumes/${DMG%%.dmg}/Inviwo.app /Applications/
        hdiutil detach /Volumes/${DMG%%.dmg}/

    - name: "Run Inviwo"
      if: runner.os == 'macOS'
      shell: bash
      run: |
        cd /Applications/Inviwo.app/Contents/MacOS/
        ./inviwo --logconsole --quit

    - name: "Setup tmate session (on failure and debug_enabled)"
      if: ${{ failure() && github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
      uses: mxschmitt/action-tmate@v3
      with:
        timeout-minutes: 15
        limit-access-to-actor: true


  update-api-docs:
    name: "Publish updated API Docs"
    if: github.ref == 'refs/heads/master'
    needs: [build, test-installer]
    runs-on: windows-latest
    steps:
      - name: "Clone Inviwo"
        uses: actions/checkout@v4
        with: 
          ref: gh-pages
          path: inviwo
          submodules: false

      - name: "Download python-api"
        uses: actions/download-artifact@v3
        with:
          name: inviwo-python-api
          path: inviwo/python-api

      - name: "Download cpp-api"
        uses: actions/download-artifact@v3
        with:
          name: inviwo-cpp-api
          path: inviwo/cpp-api

      - name: "Publish python-api"
        run: |
          cd inviwo
          git config --global user.email "team@inviwo.org"
          git config --global user.name "Inviwo Team"
          git add python-api
          git commit -m "Update Python API Docs"
          git push

      - name: "Publish cpp-api"
        run: |
          cd inviwo
          git config --global user.email "team@inviwo.org"
          git config --global user.name "Inviwo Team"
          git add cpp-api
          git commit -m "Update C++ API Docs"
          git push

  update-latest-release:
    name: "Update latest release"
    if: github.ref == 'refs/heads/master'
    needs: [build, test-installer]
    strategy:
      matrix:
        os: [windows-latest] # macos-latest,
        include:
          - os: 'windows-latest'
            installer: 'inviwo-installer-win'
          #- os: 'macos-latest'
          #  installer: 'inviwo-installer-macos'
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: "Download installer"
      uses: actions/download-artifact@v3
      with:
        name: ${{ matrix.installer }}

    - name: "Upload binaries to release"
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: Inviwo-*
        file_glob: true
        tag: latest
        overwrite: true
        body: "The latest inviwo build, updated for every merged pull request."
