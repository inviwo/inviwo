name: Build Inviwo

on: 
  push:
  workflow_dispatch:

env:
  BUILD_TYPE: Release
  VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'         # recognized by vcpkg
  # QT_DEBUG_PLUGINS: 1                                        # print qt plugin debug info

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-20.04]
        include:
          - os: 'windows-latest'
            triplet: 'x64-windows'
            mono: ''
            # Disable doxygen for now since generating python docs fails (#1309)
            cmake: '--preset msvc-dev-vcpkg -DIVW_MODULE_HDF5=ON -DIVW_DOXYGEN_PROJECT=OFF 
                    -DIVW_DOXYGEN_LATEX_PATH="C:/tools/TinyTeX/bin/win32/pdflatex.exe"'
            # Removed targets 'DOXY-Inviwo DOXY-Python' due to disabled doxygen
            targets: 'ALL_BUILD package'
            installer: 'inviwo-installer-win'
            artifact: 'build/inviwo-v*.exe'
          - os: 'macos-latest'
            triplet: 'x64-osx'
            mono: 'mono'
            cmake: '--preset ninja-dev-vcpkg -DIVW_MODULE_HDF5=OFF'
            targets: 'all package'
            installer: 'inviwo-installer-macos'
            artifact: 'build/Inviwo-v*.dmg'
          - os: 'ubuntu-20.04'
            triplet: 'x64-linux'
            mono: 'mono'
            # Disable benchmark for now due to error: 
            # memcpy’ is not a member of ‘std’; did you mean ‘wmemcpy’
            cmake: '--preset ninja-dev-vcpkg -DIVW_USE_SIGAR=OFF -DIVW_MODULE_HDF5=OFF -DIVW_TEST_BENCHMARKS=OFF' 
            targets: 'all package'
            installer: 'inviwo-installer-ubuntu'
            artifact: 'build/inviwo-v*.deb'
      fail-fast: false
      
    runs-on: ${{ matrix.os }}
    timeout-minutes: 360
    
    steps:
    - name: Chocolatey Install 
      if: runner.os == 'Windows'
      shell: bash
      run: |
        choco install doxygen.install 
        choco install nsis
        choco install tinytex
        GP=`cygpath -u $GITHUB_PATH` 
        
        echo "/c/Program Files/doxygen/bin" >> $GP
        echo "/c/Program Files (x86)/NSIS" >> $GP
        echo "/c/tools/TinyTeX/bin/win32" >> $GP

    #- name: Setup tmate session
    #  uses: mxschmitt/action-tmate@v3
    #  timeout-minutes: 60

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
        architecture: 'x64'
    
    - name: Install Python Modules 
      shell: bash
      run: pip3 install numpy Sphinx sphinx-rtd-theme recommonmark
    
    - name: Clone VCPKG
      uses: actions/checkout@v2
      with:
        repository: 'microsoft/vcpkg'
        path: 'vcpkg' # The cmake vcpkg present expects vcpkg to be next to the inviwo source folder
    
    # Cache built dependencies for faster subsequent builds
    - name: 'Setup NuGet Credentials'
      shell: bash
      run: >
        ${{ matrix.mono }} `vcpkg fetch nuget | tail -n 1`
        sources add
        -source "https://nuget.pkg.github.com/inviwo/index.json"
        -storepasswordincleartext
        -name "GitHub"
        -username "inviwo"
        -password "${{ secrets.GITHUB_TOKEN }}"

    - name: Apt Install, switch to gcc-11
      shell: bash
      if: runner.os == 'Linux'
      run: |
        sudo apt install libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev libglew-dev ninja-build gcc-11 g++-11
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 110 --slave /usr/bin/g++ g++ /usr/bin/g++-11 --slave /usr/bin/gcov gcov /usr/bin/gcov-11
        sudo update-alternatives --set gcc /usr/bin/gcc-11
  
    - name: Brew Install
      shell: bash
      if: runner.os == 'macOS'
      run: |
        brew install ninja 

    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: 6.2.3
        dir: ${{ github.workspace }}
    
    - name: Clone Inviwo
      uses: actions/checkout@v2
      with: 
        path: inviwo
        submodules: recursive
        
    - name: Configure CMake
      shell: bash
      run: >
        cmake -S inviwo -B build
        -DVCPKG_TARGET_TRIPLET='${{ matrix.triplet }}'
        -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
        ${{ matrix.cmake }}

    - name: Setup C++ Log matchers
      uses: Trass3r/setup-cpp@v1

    - name: Build
      timeout-minutes: 360
      shell: bash
      run: cmake --build build --config ${{ env.BUILD_TYPE }} --parallel --target ${{ matrix.targets }}

    - name: Upload installer
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.installer }}
        path: ${{ matrix.artifact }}

    - name: Upload doxygen
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v2
      with:
        name: inviwo-cpp-api
        path: build/docs/inviwo/html/*

    - name: Upload shpinx
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v2
      with:
        name: inviwo-python-api
        path: build/docs/python-api/*


